# Roma Shell CLI Tool

## Overview

The Roma BYOB Shell CLI tool provides an interactive environment for loading and executing User
Defined Functions (UDFs). It streamlines local UDF development and debugging, eliminating the need
to run full server binaries.

Run with:
```
docker load -i tools/shell-cli.tar
docker run \
  --privileged \
  -it \
  --rm \
  --volume /absolute/path/my_udfs:/udf \
  privacy-sandbox/sample-byob-sdk/roma-byob/shell:v1
```

## Key Features

-   REPL Interface: Interactive command-line environment
-   UDF Loading: Ability to load UDFs from files or command line input
-   UDF Execution: Run UDFs with specified arguments
-   Script-based execution: Run shell CLI commands from a specified text file

## Flags

| Flag                      | Description                                                                     | Default Value          |
| ------------------------- | ------------------------------------------------------------------------------- | -----------------------|
| `--commands_file`         | (Optional) Text file with a list of CLI commands to execute.                    | N/A                    |
| `--connection_timeout`    | How long to wait for a worker to become available.                              | `absl::Minutes(1)` |
| `--disable_ipc_namespace` | Whether IPC namespace should be disabled.                                       | `true`                 |
| `--num_workers`           | Number of Roma workers.                                                         | `1`                    |
| `--sandbox`               | Sandbox mode for BYOB. Supported values: gvisor, gvisor-debug, minimal, nsjail. | `true`                 |
| `--syscall_filter`        | Whether to enable syscall filtering.                                            | `true`                 |
| `--udf_log_file`          | Path with directory to a file in which UDF logs will be stored.                 | N/A                    |

## Commands

<!-- prettier-ignore-start -->
<!-- markdownlint-disable line-length -->
| Command    | Description                              | Usage                           | Example                                   |
| ---------- | ---------------------------------------- | ------------------------------- | ----------------------------------------- |
| `commands` | Execute commands from specified filename | `commands <commands_file>`      | `commands my_script.txt`                  |
| `help`     | Display all shell commands               | `help`                          | `help`                                    |
| `exit`     | Exit the tool                            | `exit`                          | `exit`                                    |
{{ $svc := index (index .Files 0).Services 0 }}
{{- $rpc := index ($svc.MethodsWithOption "privacysandbox.apis.roma.app_api.v1.roma_rpc_annotation") 0 -}}
| `load` | Load a User Defined Function (UDF) | `load <rpc_command> <udf_file>` | `load {{ $rpc.Name }} example_udf`
{{- range $rpc := $svc.MethodsWithOption "privacysandbox.apis.roma.app_api.v1.roma_rpc_annotation" }}
| `{{ $rpc.Name }}` | {{ $rpc.Description }} | `{{ $rpc.Name }} <request_file> [response_file]` | `{{ $rpc.Name }} request.pb`
{{- end}}
<!-- markdownlint-enable line-length -->
<!-- prettier-ignore-end -->

## Request and response structures
[See the protobuf spec for the UDF request and response messages](../../specs/udf_interface.proto).
