// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package privacy_sandbox.server_common.telemetry;

message TelemetryConfig {
  enum TelemetryMode {
    UNKNOWN_TYPE = 0;

    // No telemetry (metrics/traces).
    OFF = 1;

    // Production mode.
    // `Privacy::kImpacting` metrics must be noised.
    PROD = 2;

    // Same as PROD in prod build;
    // In experiment build, enables metrics without noise; and tracing is also
    // enabled.
    EXPERIMENT = 3;

    // Same as PROD in prod build;
    // In experiment build, exports both noised and raw data for
    // `Privacy::kImpacting` metrics.
    COMPARE = 4;
  }
  TelemetryMode mode = 1;

  // If non-empty, only output these metrics in both here and default list.
  // If empty, the default list of metrics is used.
  repeated MetricConfig metric = 2;

  // The time interval between two consecutive metric exports.
  int32 metric_export_interval_ms = 3;

  // The time interval between two consecutive differential privacy aggregated.
  // metric exports, must be at least metric_export_interval_ms
  int32 dp_export_interval_ms = 4;

  repeated MetricConfig custom_udf_metric = 5;

}

message MetricConfig {
  // name should match `metrics::Definition` in the list of server's metric
  // provided when creating `ContextMap`
  optional string name = 1;

  // overwrite the public_partitions_ in metric definition if not empty
  repeated string public_partitions = 2;

  // overwrite the max_partitions_contributed_ in metric definition if being set
  optional int32 max_partitions_contributed = 3;

  // overwrite the lower_bound_ in metric definition if being set
  optional double lower_bound = 4;

  // overwrite the upper_bound_ in metric definition if being set
  optional double upper_bound = 5;

  // overwrite the privacy_budget_weight_ in metric definition if being set
  optional double privacy_budget_weight = 6;

  // overwrite the drop_noisy_values_probability_ in metric definition if being set
  optional double drop_noisy_values_probability = 7;

  //overwrite metric description
  optional string description = 8;

  //overwrite partition_type in metric definition if being set.
  //Only used by custom_udf_metric.
  optional string partition_type = 9;

  //overwrite histogram_boundaries in metric definition if being set.
  //Only used by custom_udf_metric.
  repeated double histogram_boundaries = 10;

}
