# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@bazel_skylib//lib:selects.bzl", "selects")
load("@bazel_skylib//rules:common_settings.bzl", "string_flag")
load("@rules_cc//cc:defs.bzl", "cc_library", "cc_test")

string_flag(
    name = "local_otel_export",
    build_setting_default = "ostream",
    values = [
        "ostream",
        "otlp",
    ],
    visibility = ["//visibility:public"],
)

config_setting(
    name = "local_otel_export_ostream",
    flag_values = {
        ":local_otel_export": "ostream",
    },
    visibility = ["//visibility:public"],
)

config_setting(
    name = "local_otel_export_otlp",
    flag_values = {
        ":local_otel_export": "otlp",
    },
    visibility = ["//visibility:public"],
)

selects.config_setting_group(
    name = "local_otel_ostream",
    match_all = [
        ":local_otel_export_ostream",
        "//:local_instance",
    ],
    visibility = ["//visibility:public"],
)

selects.config_setting_group(
    name = "local_otel_otlp",
    match_all = [
        ":local_otel_export_otlp",
        "//:local_instance",
    ],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "telemetry",
    srcs = ["telemetry.cc"],
    hdrs = ["telemetry.h"],
    visibility = ["//visibility:public"],
    deps = [
        ":init",
        ":telemetry_provider",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/types:optional",
        "@io_opentelemetry_cpp//api",
        "@io_opentelemetry_cpp//sdk:headers",
        "@io_opentelemetry_cpp//sdk/src/logs",
        "@io_opentelemetry_cpp//sdk/src/metrics",
        "@io_opentelemetry_cpp//sdk/src/resource",
        "@io_opentelemetry_cpp//sdk/src/trace",
    ],
)

cc_test(
    name = "telemetry_test",
    size = "small",
    srcs = ["telemetry_test.cc"],
    deps = [
        ":telemetry",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "metrics_recorder",
    srcs = ["metrics_recorder.cc"],
    hdrs = ["metrics_recorder.h"],
    deprecation = "Please switch to the //src/metric package",
    visibility = ["//visibility:public"],
    deps = [
        "//src/util:duration",
        "@com_github_google_glog//:glog",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/time",
        "@io_opentelemetry_cpp//sdk/src/metrics",
        "@io_opentelemetry_cpp//sdk/src/resource",
    ],
)

cc_library(
    name = "telemetry_provider",
    srcs = ["telemetry_provider.cc"],
    hdrs = ["telemetry_provider.h"],
    visibility = ["//visibility:public"],
    deps = [
        ":metrics_recorder",
        "@io_opentelemetry_cpp//sdk/src/metrics",
        "@io_opentelemetry_cpp//sdk/src/resource",
        "@io_opentelemetry_cpp//sdk/src/trace",
    ],
)

cc_library(
    name = "tracing",
    srcs = ["tracing.cc"],
    hdrs = ["tracing.h"],
    visibility = ["//visibility:public"],
    deps = [
        ":telemetry",
        "@com_google_absl//absl/functional:any_invocable",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@io_opentelemetry_cpp//sdk/src/resource",
        "@io_opentelemetry_cpp//sdk/src/trace",
    ],
)

cc_library(
    name = "init_local_ostream",
    srcs = ["init_local_ostream.cc"],
    hdrs = ["init.h"],
    deps = [
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/types:optional",
        "@io_opentelemetry_cpp//exporters/ostream:ostream_log_record_exporter",
        "@io_opentelemetry_cpp//exporters/ostream:ostream_metric_exporter",
        "@io_opentelemetry_cpp//exporters/ostream:ostream_span_exporter",
    ],
)

cc_library(
    name = "init_local_otlp",
    srcs = ["init_local_otlp.cc"],
    hdrs = ["init.h"],
    deps = [
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/types:optional",
        "@io_opentelemetry_cpp//exporters/otlp:otlp_grpc_exporter",
        "@io_opentelemetry_cpp//exporters/otlp:otlp_grpc_log_record_exporter",
        "@io_opentelemetry_cpp//exporters/otlp:otlp_grpc_metric_exporter",
    ],
)

cc_library(
    name = "init_aws",
    srcs = ["init_aws.cc"],
    hdrs = ["init.h"],
    deps = [
        ":aws_xray",
        "@com_google_absl//absl/types:optional",
        "@io_opentelemetry_cpp//exporters/otlp:otlp_grpc_exporter",
        "@io_opentelemetry_cpp//exporters/otlp:otlp_grpc_log_record_exporter",
        "@io_opentelemetry_cpp//exporters/otlp:otlp_grpc_metric_exporter",
    ],
)

cc_library(
    name = "init_gcp",
    srcs = ["init_gcp.cc"],
    hdrs = ["init.h"],
    deps = [
        "@com_google_absl//absl/types:optional",
        "@io_opentelemetry_cpp//exporters/otlp:otlp_grpc_exporter",
        "@io_opentelemetry_cpp//exporters/otlp:otlp_grpc_log_record_exporter",
        "@io_opentelemetry_cpp//exporters/otlp:otlp_grpc_metric_exporter",
    ],
)

alias(
    name = "init",
    actual = select({
        "//:aws_instance": ":init_aws",
        "//:azure_instance": ":init_aws",
        "//:gcp_instance": ":init_gcp",
        ":local_otel_ostream": ":init_local_ostream",
        ":local_otel_otlp": ":init_local_otlp",
    }),
    visibility = ["//visibility:public"],
)

cc_library(
    name = "aws_xray",
    srcs = ["trace_generator_aws.cc"],
    hdrs = ["trace_generator_aws.h"],
    deps = [
        "@com_google_absl//absl/random",
        "@com_google_absl//absl/strings:str_format",
        "@com_google_absl//absl/time",
        "@io_opentelemetry_cpp//sdk/src/trace",
    ],
)

cc_library(
    name = "mocks",
    testonly = 1,
    hdrs = ["mocks.h"],
    visibility = ["//visibility:public"],
    deps = [
        ":metrics_recorder",
        "@com_google_absl//absl/time",
        "@com_google_googletest//:gtest",
    ],
)

cc_test(
    name = "aws_xray_id_generator_test",
    size = "small",
    srcs = ["xray_id_generator_aws_test.cc"],
    deps = [
        ":aws_xray",
        "@com_google_absl//absl/time",
        "@com_google_googletest//:gtest_main",
    ],
)
