#!/bin/bash

set -o errexit

function usage() {
  local -r -i exitval=$1
  cat &>/dev/stderr <<USAGE
usage:
  $0 <options>
    --endpoint-hostport <host:port> host:port string
    --docker-network <name>         docker network
    --protoset <filename>           protobuf spec image file
    --rpc <rpc name>                rpc name
    --request <filename>            request.json filename
    --plaintext                     send plaintext request
environment variables:
    GRPCURL                         path to grpcurl executable (required)
USAGE
  # shellcheck disable=SC2086
  exit ${exitval}
}

function check_app() {
  declare -n _app=$1
  if [[ -z ${_app} ]]; then
    printf "env var [%s] is not set\n" "$1" &>/dev/stderr
    exit 1
  elif ! command -v "${_app}" >/dev/null; then
    printf "%s command [%s] not found or not executable\n" "$1" "${_app}" &>/dev/stderr
    exit 1
  fi
}

check_app JQ
check_app GRPCURL

declare -i PLAINTEXT=0

while [[ $# -gt 0 ]]; do
  case "$1" in
    --endpoint-hostport)
      ENDPOINT_HOSTPORT="$2"
      shift 2
      ;;
    --docker-network)
      shift 2
      ;;
    --rpc)
      RPC="$2"
      shift 2
      ;;
    --protoset)
      PROTOSET_FILENAME="$2"
      shift 2
      ;;
    --request)
      REQUEST_FILENAME="$2"
      shift 2
      ;;
    --plaintext)
      PLAINTEXT=1
      shift
      ;;
    --help | -h) usage 0 ;;
    *) shift 2 ;;
  esac
done

: "${RPC?"Error: --rpc must be specified"}"
: "${REQUEST_FILENAME?"Error: --request must be specified"}"
: "${ENDPOINT_HOSTPORT?"Error: --endpoint-hostport not specified"}"
: "${PROTOSET_FILENAME?"Error: --protoset not specified"}"

declare -a GRPCURL_ARGS=(
  -d @
  -protoset "${PROTOSET_FILENAME}"
)
if [[ ${PLAINTEXT} -eq 1 ]]; then
  GRPCURL_ARGS+=("-plaintext")
fi
GRPCURL_ARGS+=(
  "${ENDPOINT_HOSTPORT}"
  "${RPC}"
)

GRPCURL_ERROR_TMPFILE="$(mktemp)"
readonly GRPCURL_ERROR_TMPFILE

set -o xtrace
if ! "${GRPCURL}" "${GRPCURL_ARGS[@]}" <"${REQUEST_FILENAME}" 2>"${GRPCURL_ERROR_TMPFILE}"; then
  cat "${GRPCURL_ERROR_TMPFILE}"
fi
