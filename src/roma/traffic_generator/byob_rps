#!/bin/bash

set -o pipefail

declare -r -i DEFAULT_NUM_QUERIES=100
declare -i NUM_QUERIES=${DEFAULT_NUM_QUERIES}

declare -r DEFAULT_BURST_SIZE=14
declare BURST_SIZE=${DEFAULT_BURST_SIZE}

declare -r DEFAULT_NUM_WORKERS=100
declare NUM_WORKERS=${DEFAULT_NUM_WORKERS}

declare SANDBOX=minimal

declare -r -i DEFAULT_CPUS=100
declare -i CPUS=${DEFAULT_CPUS}
declare -r DEFAULT_MEMORY=100G
declare MEMORY="${DEFAULT_MEMORY}"

declare -r DEFAULT_QPS="10:5:100"
declare QPS="${DEFAULT_QPS}"

declare -r DEFAULT_MODE="byob"
declare MODE="${DEFAULT_MODE}"
declare -r DEFAULT_UDF_PATH="src/roma/tools/v8_cli/test_udfs/simple_udf.js"
declare UDF_PATH="${DEFAULT_UDF_PATH}"

declare FUNCTION_NAME

declare -r DEFAULT_INPUT_ARGS=""
declare INPUT_ARGS="${DEFAULT_INPUT_ARGS}"

declare -r DEFAULT_OUTPUT_FILE=""
declare OUTPUT_FILE="${DEFAULT_OUTPUT_FILE}"

declare -r -i DEFAULT_RUNS=1
declare -i RUNS=${DEFAULT_RUNS}

declare -r -i DEFAULT_TOTAL_INVOCATIONS=0
declare -i TOTAL_INVOCATIONS=${DEFAULT_TOTAL_INVOCATIONS}

declare -r DEFAULT_CONFIG_FILE=""
declare CONFIG_FILE="${DEFAULT_CONFIG_FILE}"

declare -r DEFAULT_FIND_MAX_QPS=false
declare FIND_MAX_QPS="${DEFAULT_FIND_MAX_QPS}"

declare -r DEFAULT_LATE_THRESHOLD=15.0
declare LATE_THRESHOLD="${DEFAULT_LATE_THRESHOLD}"

declare -r DEFAULT_DURATION=0
declare DURATION="${DEFAULT_DURATION}"

function usage() {
  local exitval=${1-1}
  cat &>/dev/stderr << USAGE
usage:
  $0 <options>
  Traffic generator settings:
    --num-queries <int>        number of queries to execute. Default: ${DEFAULT_NUM_QUERIES}.
    --burst-size <range>         number of RPCs within a burst. Default: ${DEFAULT_BURST_SIZE}.
    --num-workers <range>      number of workers to execute, as an integer or a range (min:increment:max or min:max). Default: ${DEFAULT_NUM_WORKERS}.
    --num-qps <range>          queries per second, as an integer or a range (min:increment:max or min:max). Default: ${DEFAULT_QPS}.
    --config-file <path>      JSON file containing specific QPS/burst-size configurations. Format: [{"qps": X, "burst_size": Y}, ...]. Default: ${DEFAULT_CONFIG_FILE}.
    --runs <int>             number of times to run each configuration. Default: ${DEFAULT_RUNS}.
    --total-invocations <int> total number of invocations to execute. Default: ${DEFAULT_TOTAL_INVOCATIONS}.
    --mode <string>           traffic generator mode: 'byob' or 'v8'. Default: byob
    --output-file <string>    path to output JSON. Default: print to stdout.
    --find-max-qps <bool>     find maximum QPS that maintains performance under threshold. Default: ${DEFAULT_FIND_MAX_QPS}
    --late-threshold <double>  maximum acceptable percentage of late bursts. Default: ${DEFAULT_LATE_THRESHOLD}
    --duration <duration>      run traffic generator for a specified duration. Default: ${DEFAULT_DURATION}
    --function-name <string>  name of the function to call (V8 Handler Function / BYOB Sample UDF Function).
    --input-args <string>    comma-separated arguments to pass to the handler function. If running BYOB PrimeSieve, this is the number of primes to generate. Default: ${DEFAULT_INPUT_ARGS}

  V8 Mode settings:
    --udf-path <string>      path to JavaScript UDF file. Default: ${DEFAULT_UDF_PATH}

  Container settings:
    --cpus <int>               CPU count allocated to the container. Default: ${DEFAULT_CPUS}.
    --memory <value>           memory to allocate to the container. Default: ${DEFAULT_MEMORY}.

  where <range> should be one of:
    * a single integer
    * two or three integers, colon/asterisk-delimited. The range value should be one of:
        * a string with two integers "a:b" where a <= b
        * a string with three integers "a:x:c" where a <= b, and x is the increment
        * a string with two integers and a multiplier "a*x*b" where a <= b, and x is the multiplier
USAGE
  # shellcheck disable=SC2086
  exit ${exitval}
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    --num-queries) NUM_QUERIES=$2; shift 2 || usage 1 ;;
    --burst-size) BURST_SIZE="$2"; shift 2 || usage 1 ;;
    --num-workers) NUM_WORKERS="$2"; shift 2 || usage 1 ;;
    --num-qps) QPS="$2"; shift 2 || usage 1 ;;
    --runs) RUNS=$2; shift 2 || usage 1 ;;
    --total-invocations) TOTAL_INVOCATIONS=$2; shift 2 || usage 1 ;;
    --mode) MODE="$2"; shift 2 || usage 1 ;;
    --find-max-qps) FIND_MAX_QPS="$2"; shift 2 || usage 1 ;;
    --late-threshold) LATE_THRESHOLD="$2"; shift 2 || usage 1 ;;
    --function-name) FUNCTION_NAME="$2"; shift 2 || usage 1 ;;
    --input-args) INPUT_ARGS="$2"; shift 2 || usage 1 ;;

    --cpus) CPUS=$2; shift 2 || usage 1 ;;
    --memory) MEMORY="$2"; shift 2 || usage 1 ;;

    --udf-path) UDF_PATH="$2"; shift 2 || usage 1 ;;

    --output-file) OUTPUT_FILE="$2"; shift 2 || usage 1 ;;
    --config-file) CONFIG_FILE="$2"; shift 2 || usage 1 ;;
    --duration) DURATION="$2"; shift 2 || usage 1 ;;
    -h | --help) usage 0 ;;
    *)
      printf "unrecognized arg: %s\n" "$1"
      usage
      ;;
  esac
done


IMAGE=privacysandbox/roma-byob/traffic_generator:v1-root
TRAFFIC_GENERATOR_PATH="src/roma/byob/benchmark:traffic_generator"

if [[ ${MODE} == byob ]]; then
  docker load -i bazel-bin/src/roma/byob/benchmark/traffic_generator_root_image_tar/tarball.tar
fi

declare -i FAILURE_COUNT=0
declare -r -i MAX_FAILURES=1

declare -a -r DOCKER_ARGS=(
  "--privileged"
  "--cpus=${CPUS}"
  "--memory=${MEMORY}"
)

function run_test() {
  declare -r -i burst_size=$1; shift
  declare -r -i qps=$1; shift
  declare -r -i num_workers=$1; shift
  declare -r run_id=$1; shift
  declare -r -i input_arg=$1; shift
  printf "running qps: %d with run_id: %s\n" ${qps} "${run_id}"

  declare -a CMD_ARGS=(
    "--burst_size=${burst_size}"
    "--num_queries=${NUM_QUERIES}"
    "--num_workers=${num_workers}"
    "--queries_per_second=${qps}"
    "--mode=${MODE}"
    "--output_file=${OUTPUT_FILE}"
    "--total_invocations=${TOTAL_INVOCATIONS}"
    "--run_id=${run_id}"
  )

  if [[ -n ${FUNCTION_NAME} ]]; then
    CMD_ARGS+=("--function_name=${FUNCTION_NAME}")
  fi

  # Avoid passing empty input arg
  if [[ -n ${input_arg} && ${input_arg} != "_" ]]; then
    CMD_ARGS+=("--input_args=${input_arg}")
  fi

  if [[ ${FIND_MAX_QPS} == true ]]; then
    CMD_ARGS+=("--find_max_qps")
    IFS=':' read -r low_qps step high_qps <<< "${QPS}"
    if [[ -z ${high_qps} ]]; then
      high_qps=${step}
    fi
    CMD_ARGS+=("--qps_search_bounds=${low_qps}:${high_qps}")
    CMD_ARGS+=("--late_threshold=${LATE_THRESHOLD}")
  fi

  if [[ ${DURATION} -ne 0 ]]; then
    CMD_ARGS+=("--duration=${DURATION}")
  fi

  if [[ ${MODE} == v8 ]]; then
    if [[ -n ${UDF_PATH} ]]; then
      CMD_ARGS+=("--udf_path=${UDF_PATH}")
    fi
  else
    CMD_ARGS+=("--sandbox=${SANDBOX}")
  fi

  set -o xtrace
  local output
  local exit_status
  if [[ ${MODE} == v8 ]]; then
    output=$(builders/tools/bazel-debian run \
      "${TRAFFIC_GENERATOR_PATH}" \
      -- \
      "${CMD_ARGS[@]}" 2>&1 | grep -Ev "sandbox.cc|monitor_base.cc|sandbox2.cc")
  else
    output=$(docker run \
      "${DOCKER_ARGS[@]}" \
      "${IMAGE}" \
      "${CMD_ARGS[@]}" 2>&1)
  fi

  exit_status=$?
  if [[ ${exit_status} -ne 0 ]]; then
      FAILURE_COUNT=$((FAILURE_COUNT+1))
  fi

  echo "${output}"
}

function parse_range_or_list() {
  declare -n _val=$1
  # shellcheck disable=SC2128
  if [[ ${_val} =~ ^[0-9]+:[0-9]+$ ]] || [[ ${_val} =~ ^[0-9]+:[0-9]+:[0-9]+$ ]]; then
    # shellcheck disable=SC2086,SC2207
    _val=($(seq ${_val//:/ }))
  elif [[ ${_val} == *"*"* ]]; then
    # shellcheck disable=SC2128
    IFS='*' read -r start mult end <<< "${_val}"
    declare -i start=${start:-1}
    declare -i mult=${mult:-1}
    declare -i end=${end:-1000}
    declare -a tmp
    for ((i = start; i <= end; i *= mult)); do
      tmp+=("${i}")
    done
    _val=("${tmp[@]}")
  else
    # shellcheck disable=SC2128
    IFS=',' read -r -a _val <<< "${_val}"
  fi
}

parse_range_or_list QPS
parse_range_or_list NUM_WORKERS
parse_range_or_list BURST_SIZE
if [[ ${MODE} == byob ]]; then
  parse_range_or_list INPUT_ARGS
fi

if [[ -z ${INPUT_ARGS} ]]; then
  INPUT_ARGS=("_") # Empty input arg to avoid looping over empty array
elif [[ ${MODE} == v8 ]]; then
  # shellcheck disable=SC2128
  INPUT_ARGS=("${INPUT_ARGS}")
fi

set -o xtrace

declare -i qps num_workers burst_size
declare BASE_RUN_ID
if [[ -n ${CONFIG_FILE} ]]; then
  echo "Reading configurations from ${CONFIG_FILE}"
  echo "Content of config file:"
  cat "${CONFIG_FILE}"

  while IFS= read -r config; do
    qps=$(echo "${config}" | jq -r '.qps')
    burst_size=$(echo "${config}" | jq -r '.burst_size')
    input_arg=$(echo "${config}" | jq -r '.input_arg')
    for num_workers in "${NUM_WORKERS[@]}"; do
      BASE_RUN_ID="$(mktemp --dry-run XXXX)"
      for ((run=1; run<=RUNS; run++)); do
        echo "Running test with qps=${qps}, burst_size=${burst_size}, workers=${num_workers}, input_arg=${input_arg}, run=${run}"  # Debug line
        run_test ${burst_size} ${qps} ${num_workers} "${BASE_RUN_ID}"-"${run}" "${input_arg}"
        if [[ ${FAILURE_COUNT} -ge ${MAX_FAILURES} ]]; then
          printf "%d failures. Exiting\n" ${FAILURE_COUNT}
          exit 1
        fi
      done
    done
  done < <(jq -c '.[]' "${CONFIG_FILE}")
else
  for qps in "${QPS[@]}"; do
    for num_workers in "${NUM_WORKERS[@]}"; do
      for burst_size in "${BURST_SIZE[@]}"; do
        for input_arg in "${INPUT_ARGS[@]}"; do
          BASE_RUN_ID="$(mktemp --dry-run XXXX)"
          for ((run=1; run<=RUNS; run++)); do
            run_test ${burst_size} ${qps} ${num_workers} "${BASE_RUN_ID}"-"${run}" "${input_arg}"
            if [[ ${FAILURE_COUNT} -ge ${MAX_FAILURES} ]]; then
              printf "%d failures. Exiting\n" ${FAILURE_COUNT}
              exit 1
            fi
          done
        done
      done
    done
  done
fi
