# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@rules_cc//cc:defs.bzl", "cc_binary")
load("@rules_pkg//pkg:mappings.bzl", "pkg_attributes", "pkg_files")
load("@rules_pkg//pkg:tar.bzl", "pkg_tar")
load("//builders/bazel:container_deps.bzl", "DISTROLESS_USERS")
load("//src/roma/tools/api_plugin:roma_api.bzl", "roma_image")

cc_binary(
    name = "hello_world_binary",
    srcs = ["hello_world_binary.cc"],
    deps = [
        "//src/roma/config",
        "//src/roma/interface",
        "//src/roma/roma_service",
        "//src/util:duration",
        "@com_google_absl//absl/synchronization",
    ],
)

cc_binary(
    name = "callback_binary",
    srcs = ["callback_binary.cc"],
    deps = [
        "//src/roma/config",
        "//src/roma/interface",
        "//src/roma/roma_service",
        "//src/util:duration",
        "@com_google_absl//absl/synchronization",
    ],
)

TEST_TARGET_PREFIXES = [
    "hello_world",
    "callback",
]

[
    pkg_files(
        name = "{}_execs".format(prefix),
        srcs = [":{}_binary".format(prefix)],
        attributes = pkg_attributes(mode = "0500"),
        prefix = "/server/bin",
    )
    for prefix in TEST_TARGET_PREFIXES
]

[
    pkg_tar(
        name = "{}_tar_{}".format(
            prefix,
            user.flavor,
        ),
        srcs = [
            ":{}_execs".format(prefix),
        ],
        owner = "{}.{}".format(
            user.uid,
            user.gid,
        ),
    )
    for user in DISTROLESS_USERS
    for prefix in TEST_TARGET_PREFIXES
]

"""
Usage:
  builders/tools/bazel-debian build //src/roma/tools/v8_cli:hello_world_root_image.tar
  docker load -i bazel-bin/src/roma/tools/v8_cli/hello_world_root_image_tar/tarball.tar
  docker run --privileged --volume="${PWD}"/dist:/tmp/runsc-log --cpus=64 --memory=512gb \
  privacysandbox/roma-byob/hello_world:v1-root
"""

[
    roma_image(
        name = "{}_{}_image".format(
            prefix,
            user.flavor,
        ),
        debug = True,
        entrypoint = ["/server/bin/{}_binary".format(prefix)],
        labels = {
            "tee.launch_policy.allow_capabilities": "true",
            "tee.launch_policy.allow_cgroups": "true",
            "tee.launch_policy.log_redirect": "always",
        },
        repo_tags = ["privacysandbox/roma-byob/{}_image:v1-{}".format(
            prefix,
            user.flavor,
        )],
        tags = [
            "noasan",
            "notsan",
            "noubsan",
        ],
        tars = [
            ":{}_tar_{}".format(
                prefix,
                user.flavor,
            ),
        ],
        user = user,
        visibility = ["//visibility:public"],
    )
    for user in DISTROLESS_USERS
    for prefix in TEST_TARGET_PREFIXES
]

"""
Sample usage:

builders/tools/bazel-debian run //src/roma/tools/v8_cli:copy_to_dist
docker load -i dist/roma_v8/hello_world_root_image.tar
docker run -it --privileged privacysandbox/roma-byob/hello_world:v1-root
"""

cp_cmds = ["mkdir -p {dir}"] + [
    "cp $(execpath :{0}_{1}_image.tar) {{dir}}/{0}_{1}_image.tar".format(
        prefix,
        u.flavor,
    )
    for u in DISTROLESS_USERS
    for prefix in TEST_TARGET_PREFIXES
]

genrule(
    name = "copy_to_dist",
    srcs = [
        ":{}_{}_image.tar".format(
            prefix,
            u.flavor,
        )
        for u in DISTROLESS_USERS
        for prefix in TEST_TARGET_PREFIXES
    ],
    outs = ["copy_to_dist.bin"],
    cmd_bash = "cat <<EOF >'$@'\n" + "\n".join(["\n".join(cp_cmds).format(
        dir = "dist/roma_v8",
        user = u.flavor,
    ) for u in DISTROLESS_USERS]) + """
builders/tools/normalize-dist
EOF""",
    executable = True,
    local = True,
    message = "copying v8 artifacts to dist directory",
    visibility = ["//visibility:public"],
)
