# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@io_bazel_rules_closure//closure:defs.bzl", "closure_js_library", "closure_js_test")
load("@rules_cc//cc:defs.bzl", "cc_binary", "cc_library")
load("@rules_pkg//pkg:mappings.bzl", "pkg_attributes", "pkg_files")
load("@rules_pkg//pkg:tar.bzl", "pkg_tar")
load("//src/roma/tools/api_plugin:roma_api.bzl", "roma_image")
load("//third_party:container_deps.bzl", "DISTROLESS_USERS")

package(default_visibility = ["//visibility:public"])

cc_binary(
    name = "v8_flags",
    srcs = ["v8_flags.cc"],
    deps = [
        "@v8//:v8_icu",
    ],
)

cc_library(
    name = "utils",
    srcs = ["utils.cc"],
    hdrs = ["utils.h"],
    deps = [
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/strings",
    ],
)

cc_binary(
    name = "v8_shell",
    srcs = ["v8_shell.cc"],
    data = [
        ":test_udfs",
    ],
    deps = [
        "@v8//:v8_icu",
    ],
)

filegroup(
    name = "test_command_scripts",
    srcs = glob(["test_command_scripts/**"]),
)

filegroup(
    name = "test_inputs",
    srcs = glob(["test_inputs/**"]),
)

filegroup(
    name = "test_udfs",
    srcs = glob(["test_udfs/**"]),
    visibility = ["//visibility:public"],
)

pkg_files(
    name = "udf_execs",
    srcs = [":test_udfs"],
    attributes = pkg_attributes(mode = "0500"),
    prefix = "/udf",
)

[
    pkg_tar(
        name = "udf_{}_tar".format(user.flavor),
        srcs = [":udf_execs"],
        owner = "{}.{}".format(
            user.uid,
            user.gid,
        ),
        visibility = ["//visibility:public"],
    )
    for user in DISTROLESS_USERS
]

closure_js_library(
    name = "test_doubles_library",
    srcs = ["test_doubles_library.js"],
    suppress = [
        "reportUnknownTypes",
    ],
)

closure_js_test(
    name = "test_doubles_library_test",
    size = "small",
    srcs = ["test_doubles_library_test.js"],
    entry_points = [
        "goog:google.scp.roma.tools.v8_cli.test_doubles_library_test",
    ],
    suppress = [
        "JSC_WRONG_ARGUMENT_COUNT",
    ],
    # TODO: b/354926654 - Write a BUILD file to compile phantomJS for aarch64
    target_compatible_with = select({
        "@platforms//cpu:aarch64": ["@platforms//:incompatible"],
        "@platforms//cpu:x86_64": [],
    }),
    deps = [
        ":test_doubles_library",
        "@com_google_javascript_closure_library//closure/goog/testing:testsuite",
    ],
)

cc_library(
    name = "roma_repl",
    srcs = ["roma_repl.cc"],
    hdrs = ["roma_repl.h"],
    data = [
        ":test_command_scripts",
        ":test_doubles_library",
        ":test_udfs",
    ],
    deps = [
        ":utils",
        "//src/core/common/uuid",
        "//src/roma/interface",
        "//src/roma/roma_service",
        "//src/util:duration",
        "@com_google_absl//absl/base:log_severity",
        "@com_google_absl//absl/base:nullability",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/synchronization",
        "@com_google_absl//absl/time",
        "@com_google_absl//absl/types:span",
    ],
)

cc_binary(
    name = "roma_benchmark",
    srcs = ["roma_benchmark.cc"],
    data = [
        ":test_doubles_library",
        ":test_inputs",
        ":test_udfs",
        "//src/roma/testing/cpp_wasm_sieve_of_eratosthenes_example",
    ],
    deps = [
        ":utils",
        "//src/core/common/uuid",
        "//src/roma/interface",
        "//src/roma/roma_service",
        "@com_google_absl//absl/base:log_severity",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/flags:usage",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/log:initialize",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/synchronization",
        "@com_google_absl//absl/time",
        "@google_benchmark//:benchmark",
        "@nlohmann_json//:lib",
    ],
)

cc_binary(
    name = "roma_shell",
    srcs = ["roma_shell.cc"],
    deps = [
        ":roma_repl",
        ":utils",
        "//src/util:duration",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/flags:usage",
        "@com_google_absl//absl/log:initialize",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/time",
    ],
)

cc_binary(
    name = "traffic_generator",
    srcs = ["traffic_generator.cc"],
    deps = [
        "//src/roma/traffic_generator",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
    ],
)

pkg_files(
    name = "traffic_generator_execs",
    srcs = [":traffic_generator"],
    attributes = pkg_attributes(mode = "0500"),
    prefix = "/server/bin",
)

[
    pkg_tar(
        name = "traffic_generator_tar_{}".format(user.flavor),
        srcs = [
            ":traffic_generator_execs",
        ],
        owner = "{}.{}".format(
            user.uid,
            user.gid,
        ),
    )
    for user in DISTROLESS_USERS
]

"""
Usage:
  builders/tools/bazel-debian build //src/roma/tools/v8_cli:traffic_generator_root_image.tar
  docker load -i bazel-bin/src/roma/tools/v8_cli/traffic_generator_root_image_tar/tarball.tar
  docker run --privileged --volume="${PWD}"/dist:/tmp/runsc-log --cpus=64 --memory=512gb \
  privacysandbox/roma-byob/traffic-generator:v1-root \
    --num_workers=84 --queries_per_second=10 --burst_size=14 \
    --num_queries=1000 --udf_path="/udf/sample_udf" --handler_name="Handler"
"""

[
    roma_image(
        name = "traffic_generator_{}_image".format(user.flavor),
        debug = True,
        entrypoint = ["/server/bin/traffic_generator"],
        labels = {
            "tee.launch_policy.log_redirect": "always",
            "tee.launch_policy.privileged": "true",
        },
        repo_tags = ["privacysandbox/roma-byob/traffic-generator:v1-{}".format(user.flavor)],
        tags = [
            "noasan",
            "notsan",
            "noubsan",
        ],
        tars = [
            ":traffic_generator_tar_{}".format(user.flavor),
            ":udf_{}_tar".format(user.flavor),
        ],
        user = user,
        visibility = ["//visibility:public"],
    )
    for user in DISTROLESS_USERS
]

"""
Sample usage:

builders/tools/bazel-debian run //src/roma/tools/v8_cli:copy_to_dist
docker load -i dist/roma_v8/traffic_generator_root_image.tar
docker run -it --privileged privacysandbox/roma-byob/traffic-generator:v1-root
"""

cp_cmds = ["mkdir -p {dir}"] + [
    "cp $(execpath :traffic_generator_{0}_image.tar) {{dir}}/traffic_generator_{0}_image.tar".format(
        u.flavor,
    )
    for u in DISTROLESS_USERS
]

genrule(
    name = "copy_to_dist",
    srcs = [":traffic_generator_{}_image.tar".format(
        u.flavor,
    ) for u in DISTROLESS_USERS],
    outs = ["copy_to_dist.bin"],
    cmd_bash = "cat <<EOF >'$@'\n" + "\n".join(["\n".join(cp_cmds).format(
        dir = "dist/roma_v8",
        user = u.flavor,
    ) for u in DISTROLESS_USERS]) + """
builders/tools/normalize-dist
EOF""",
    executable = True,
    local = True,
    message = "copying aws artifacts to dist directory",
    visibility = ["//visibility:public"],
)

cc_library(
    name = "roma_v8_rpc_factory",
    hdrs = ["roma_v8_rpc_factory.h"],
    data = [
        "//src/roma/tools/v8_cli:test_udfs",
    ],
    deps = [
        "//src/roma/interface",
        "//src/roma/roma_service",
        "//src/util:duration",
        "//src/util:execution_token",
        "//src/util/status_macro:status_macros",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/synchronization",
        "@com_google_absl//absl/time",
    ],
)
