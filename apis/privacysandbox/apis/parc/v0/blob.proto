// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package privacysandbox.apis.parc.v0;

option go_package = "github.com/privacysandbox/data-plane-shared/apis/parc/v0";

// Request to get a blob's contents from storage.
message GetBlobRequest {
  // Metadata of the blob to get.
  BlobMetadata blob_metadata = 1;

  // Optional range of bytes of the blob to acquire. If not supplied, all of
  // the bytes will be acquired.
  optional ByteRange byte_range = 2;
}

// The encoding data type for `data` in GetBlobResponse.
enum ContentEncoding {
  CONTENT_ENCODING_UNSPECIFIED = 0;
  CONTENT_ENCODING_PLAINTEXT = 1;
  CONTENT_ENCODING_GZIP = 2;
}

// Specifies the type of hashing algorithm used to compute the hash value.
enum HashType {
  // Unspecified or unknown hash type. Clients should treat this as an error.
  HASH_TYPE_UNSPECIFIED = 0;
  // Cyclic Redundancy Check (32-bit). Encoded as a hexadecimal string.
  HASH_TYPE_CRC32C = 1;
  // Message Digest Algorithm 5.
  HASH_TYPE_MD5 = 2;
}

// Represents a hash value and its associated hash algorithm.
message Hash {
  // The hash value.
  string hash = 1;

  // The type of hashing algorithm used to generate the `hash` field.
  HashType type = 2;
}

// Response of getting a blob's contents from storage.
message GetBlobResponse {
  // The data of the acquired blob chunk. If a byte range was supplied
  // in the request, the 0th byte will be the begin byte index.
  bytes data = 1;

  // Metadata of the blob to interact with.
  // The first returned GetBlobResponse will contain `blob_metadata.bucket_name`
  // and `blob_metadata.blob_name`.
  optional BlobMetadata blob_metadata = 2;

  // The encoding data type for `data`.
  // Only the first returned GetBlobResponse will contain `content_encoding`.
  optional ContentEncoding content_encoding = 3;
}

// Request to list the metadata of blobs in a bucket.
message ListBlobsMetadataRequest {
  // `BlobMetadata.bucket_name` is the name of the bucket to search,
  // `BlobMetadata.blob_name` in this context is used as a prefix - all returned
  // blobs will start with this `BlobMetadata.blob_name`.
  // Provide an empty `BlobMetadata.blob_name` to list all blobs.
  BlobMetadata blob_metadata = 1;

  // Used to page a listing operation. The returned list will only include
  // keys that occur lexicographically after page_token.
  optional string page_token = 2;

  // The maximum length of returned `ListBlobsMetadataResponse.blob_metadatas`.
  optional uint64 max_page_size = 3;

  // If true, exclude blobs that are directories in
  // `ListBlobsMetadataResponse.blob_metadatas`.
  optional bool exclude_directories = 4;
}

// Response of listing blob metadata.
message ListBlobsMetadataResponse {
  // List of blob metadatas acquired from the request.
  repeated BlobMetadata blob_metadatas = 1;

  // If max_page_size was reached, then next_page_token can be used to continue
  // listing blobs. A subsequent call to ListBlobsMetadata should be performed
  // with ListBlobsMetadataRequest.page_token = next_page_token. The last
  // response for ListBlobsMetadata will be an empty string.
  optional string next_page_token = 2;
}

// Request to get the metadata of a blob.
message GetBlobMetadataRequest {
  // `BlobMetadata.blob_name` in this context is the path to the blob after
  // `BlobMetadata.blob_name`. If `BlobMetadata.blob_name` is empty, then the
  // returned blobs metadata is of the bucket.
  BlobMetadata blob_metadata = 1;
}

// Response of getting a blobs metadata.
message GetBlobMetadataResponse {
  // The retrieved blobs metadata.
  BlobMetadata blob_metadata = 1;
}

// Describes a blob in blob storage.
message BlobMetadata {
  // The name of the bucket the blob belongs to.
  string bucket_name = 1;

  // The name of the blob to interact with.
  string blob_name = 2;

  // The size of the blobs data.
  optional uint64 blob_size = 3;

  // The hash values and its associated hash algorithm type.
  // The hash of the blobs data, not including metadata of the blob.
  repeated Hash hashes = 4;

  // TODO - Add versioning for generation in GCS and ETag for S3.
}

// Describes a range of bytes of a blob.
message ByteRange {
  // The byte index to begin with (inclusive).
  uint64 begin = 1;

  // The byte index to end on (inclusive).
  // Must not be less than `begin`.
  // Must not be greater than the actual blob length.
  uint64 end = 2;
}
