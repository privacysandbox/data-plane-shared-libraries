# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@aspect_bazel_lib//lib:expand_template.bzl", "expand_template")
load("@bazel_skylib//lib:sets.bzl", "sets")
load("@rules_cc//cc:defs.bzl", "cc_binary", "cc_library")
load("@rules_pkg//pkg:mappings.bzl", "pkg_attributes", "pkg_files", "pkg_mkdirs")
load("@rules_pkg//pkg:tar.bzl", "pkg_tar")
load("//src/roma/tools/api_plugin:roma_api.bzl", "roma_byob_image")
load("//third_party:container_deps.bzl", "DISTROLESS_USERS")

package(default_visibility = ["//visibility:public"])

cc_library(
    name = "roma_byob_rpc_factory",
    hdrs = ["roma_byob_rpc_factory.h"],
    deps = [
        "//src/roma/byob/config",
        "//src/roma/byob/interface:roma_service",
        "//src/roma/byob/sample_udf:sample_byob_sdk_cc_proto",
        "//src/util:duration",
        "//src/util:execution_token",
        "//src/util/status_macro:status_macros",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/synchronization",
        "@com_google_absl//absl/time",
    ],
)

cc_binary(
    name = "traffic_generator",
    srcs = ["traffic_generator.cc"],
    deps = [
        "//src/roma/traffic_generator",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
    ],
)

pkg_files(
    name = "traffic_generator_execs",
    srcs = [":traffic_generator"],
    attributes = pkg_attributes(mode = "0500"),
    prefix = "/server/bin",
)

[
    pkg_tar(
        name = "traffic_generator_tar_{}".format(user.flavor),
        srcs = [
            ":traffic_generator_execs",
        ],
        owner = "{}.{}".format(
            user.uid,
            user.gid,
        ),
    )
    for user in DISTROLESS_USERS
]

[
    expand_template(
        name = "traffic_generator_{}_image_test_yaml".format(user.flavor),
        out = "traffic_generator_{}_image_test.yaml".format(user.flavor),
        substitutions = {
            "{GID}": str(user.gid),
            "{UID}": str(user.uid),
        },
        template = ":traffic_generator_image_test.yaml",
    )
    for user in DISTROLESS_USERS
]

"""
(Optional) Step 1: Make ProcessRequest in dispatcher.h async by removing wait
  for worker and returning early with an error.
Step 2: Run the following from a command line:
    builders/tools/bazel-debian build //src/roma/byob/benchmark:traffic_generator_250qps-84w-bs14-nq2000-minimal-noipc_root_image.tar
    docker load -i bazel-bin/src/roma/byob/benchmark/traffic_generator_250qps-84w-bs14-nq2000-minimal-noipc_root_image_tar/tarball.tar
    docker run --privileged --volume="${PWD}"/dist:/tmp/runsc-log --cpus=64 --memory=512gb \
    privacysandbox/roma-byob/traffic-generator:v1-250qps-84w-bs14-nq2000-minimal-noipc-root \
      --num_workers=84 --queries_per_second=10 --burst_size=14 \
      --num_queries=1000 --sandbox=minimal --syscall_filter=true --lib_mounts="/lib64" \
      --binary_path="/udf/sample_udf"
"""

worker_cpu_ratios = [
    0.75,
    1,
    1.25,
    1.75,
    2.5,
]

cpus = [
    32,
    64,
    96,
    128,
    30,
    60,
    90,
]

# remove duplicates
workers_counts = sets.to_list(sets.make([int(cpu * worker_ratio) for cpu in cpus for worker_ratio in worker_cpu_ratios]))

traffic_generator_args = [
    (
        "{}qps-{}w-bs{}-nq{}-{}-lt{}-noipc".format(qps, workers, burst_size, num_queries, sandbox, late_threshold),
        [
            "--num_workers={}".format(workers),
            "--find_max_qps",
            "--qps_search_bounds=1:10000",
            "--late_threshold={}".format(late_threshold),
            "--burst_size={}".format(burst_size),
            "--num_queries={}".format(num_queries),
            "--sandbox={}".format(sandbox),
            "--syscall_filter={}".format(syscall_filter),
            "--lib_mounts=/lib64",
            "--binary_path=/udf/sample_udf",
            "--disable_ipc_namespace=true",
            "--verbose",
        ],
    )
    for workers in [84] + workers_counts
    for qps in [
        "max",
    ]
    for late_threshold in [
        0,
        15,
    ]
    for burst_size in [
        6,
        14,
    ]
    for num_queries in [2000]
    for sandbox, syscall_filter in [("minimal", "true")]
]

[
    roma_byob_image(
        name = "traffic_generator_{}_{}_image".format(
            name,
            user.flavor,
        ),
        cmd = args,
        debug = True,
        entrypoint = ["/server/bin/traffic_generator"],
        labels = {
            "tee.launch_policy.log_redirect": "always",
            "tee.launch_policy.privileged": "true",
        },
        repo_tags = ["privacysandbox/roma-byob/traffic-generator:v1-{}-{}".format(
            name,
            user.flavor,
        )],
        tags = [
            "manual",
            "noasan",
            "notsan",
            "noubsan",
        ],
        tars = [
            ":traffic_generator_tar_{}".format(user.flavor),
            "//src/roma/byob/sample_udf:udf_{}_tar".format(user.flavor),
        ],
        user = user,
    )
    for name, args in traffic_generator_args
    for user in DISTROLESS_USERS
]

[
    roma_byob_image(
        name = "traffic_generator_{}_image".format(user.flavor),
        container_structure_test_configs = [":traffic_generator_{}_image_test.yaml".format(user.flavor)],
        debug = True,
        entrypoint = ["/server/bin/traffic_generator"],
        repo_tags = ["privacysandbox/roma-byob/traffic_generator:v1-{}".format(user.flavor)],
        tags = [
            "noasan",
            "notsan",
            "noubsan",
        ],
        tars = [
            ":traffic_generator_tar_{}".format(user.flavor),
            "//src/roma/byob/sample_udf:udf_{}_tar".format(user.flavor),
        ],
        user = user,
    )
    for user in DISTROLESS_USERS
]

cc_binary(
    name = "memory_usage_benchmark",
    srcs = ["memory_usage_benchmark.cc"],
    deps = [
        "//src/roma/byob/sample_udf:sample_byob_sdk_cc_proto",
        "//src/roma/byob/sample_udf:sample_byob_sdk_roma_cc_lib",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/synchronization",
        "@com_google_absl//absl/time",
        "@nlohmann_json//:lib",
    ],
)

pkg_files(
    name = "memory_usage_benchmark_execs",
    srcs = [":memory_usage_benchmark"],
    attributes = pkg_attributes(mode = "0500"),
    prefix = "/server/bin",
)

[
    pkg_tar(
        name = "memory_usage_benchmark_tar_{}".format(user.flavor),
        srcs = [
            ":memory_usage_benchmark_execs",
        ],
        owner = "{}.{}".format(
            user.uid,
            user.gid,
        ),
    )
    for user in DISTROLESS_USERS
]

pkg_files(
    name = "sort_list_binaries_execs",
    srcs = [
        "//src/roma/byob/sample_udf:sort_list_100k_udf",
        "//src/roma/byob/sample_udf:sort_list_10k_udf",
        "//src/roma/byob/sample_udf:sort_list_1m_udf",
    ],
    attributes = pkg_attributes(mode = "0500"),
    prefix = "/udf",
)

[
    pkg_tar(
        name = "sort_list_binaries_{}_tar".format(user.flavor),
        srcs = [":sort_list_binaries_execs"],
        owner = "{}.{}".format(
            user.uid,
            user.gid,
        ),
    )
    for user in DISTROLESS_USERS
]

[
    expand_template(
        name = "memory_usage_benchmark_{}_image_test_yaml".format(user.flavor),
        out = "memory_usage_benchmark_{}_image_test.yaml".format(user.flavor),
        substitutions = {
            "{GID}": str(user.gid),
            "{UID}": str(user.uid),
        },
        template = ":memory_usage_benchmark_image_test.yaml",
    )
    for user in DISTROLESS_USERS
]

# builders/tools/bazel-debian build //src/roma/byob/benchmark:memory_usage_benchmark_root_image.tar
# docker load -i bazel-bin/src/roma/byob/benchmark/memory_usage_benchmark_root_image_tar/tarball.tar
# docker run --privileged --volume="${PWD}"/dist:/data privacysandbox/roma-byob/memory_usage_benchmark:v1-root --num_workers 10 --execute_iterations 10 --output=/data/output.csv
[
    roma_byob_image(
        name = "memory_usage_benchmark_{}_image".format(user.flavor),
        container_structure_test_configs = [":memory_usage_benchmark_{}_image_test.yaml".format(user.flavor)],
        debug = True,
        entrypoint = ["/server/bin/memory_usage_benchmark"],
        repo_tags = ["privacysandbox/roma-byob/memory_usage_benchmark:v1-{}".format(user.flavor)],
        tags = [
            # Disabled due to flakiness
            "manual",
            "noasan",
            "notsan",
            "noubsan",
        ],
        tars = [
            ":memory_usage_benchmark_tar_{}".format(user.flavor),
            "sort_list_binaries_{}_tar".format(user.flavor),
        ],
        user = user,
    )
    for user in DISTROLESS_USERS
]

cc_binary(
    name = "roma_byob_benchmark",
    srcs = ["roma_byob_benchmark.cc"],
    deps = [
        "//src/roma/byob/config",
        "//src/roma/byob/sample_udf:sample_byob_sdk_cc_proto",
        "//src/roma/byob/sample_udf:sample_byob_sdk_roma_cc_lib",
        "//src/roma/byob/sample_udf:sample_callback_cc_proto",
        "//src/roma/byob/utility:utils",
        "//src/roma/config:function_binding_object_v2",
        "@com_github_grpc_grpc//:grpc++",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/log:initialize",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/synchronization",
        "@google_benchmark//:benchmark",
    ],
)

pkg_mkdirs(
    name = "benchmark_distdir",
    attributes = pkg_attributes(mode = "0700"),
    dirs = ["/dist/benchmarks"],
)

pkg_files(
    name = "benchmark_execs",
    srcs = [":roma_byob_benchmark"],
    attributes = pkg_attributes(mode = "0500"),
    prefix = "/server/bin",
)

[
    pkg_tar(
        name = "benchmark_tar_{}".format(user.flavor),
        srcs = [
            ":benchmark_distdir",
            ":benchmark_execs",
        ],
        owner = "{}.{}".format(
            user.uid,
            user.gid,
        ),
    )
    for user in DISTROLESS_USERS
]

[
    expand_template(
        name = "image_{}_test_yaml".format(user.flavor),
        out = "image_{}_test.yaml".format(user.flavor),
        substitutions = {
            "{GID}": str(user.gid),
            "{UID}": str(user.uid),
        },
        template = ":image_test.yaml",
    )
    for user in DISTROLESS_USERS
]

[
    roma_byob_image(
        name = "benchmark_{flavor}{dbg}_image".format(
            dbg = debug_str,
            flavor = user.flavor,
        ),
        container_structure_test_configs = [
            ":image_{}_test.yaml".format(user.flavor),
        ],
        debug = len(debug_str) > 0,
        entrypoint = [
            "/server/bin/roma_byob_benchmark",
            "--benchmark_counters_tabular=true",
            "--benchmark_time_unit=ms",
        ],
        env = {
            "BENCHMARK_OUT": "/tmp/benchmark_out.json",
            "BENCHMARK_OUT_FORMAT": "json",
        },
        labels = {
            "tee.launch_policy.log_redirect": "always",
            "tee.launch_policy.privileged": "true",
        },
        repo_tags = [
            "privacysandbox/roma-byob/microbenchmarks:v1-{flavor}{dbg}".format(
                dbg = debug_str.replace("_", "-"),
                flavor = user.flavor,
            ),
        ],
        tars = [
            ":benchmark_tar_{}".format(user.flavor),
            "//src/roma/byob/sample_udf:udf_{}_tar".format(user.flavor),
        ],
        user = user,
    )
    for debug_str in ("_debug", "")
    for user in DISTROLESS_USERS
]

"""
Sample usage:

builders/tools/bazel-debian run //src/roma/byob/benchmark:copy_to_dist
docker load -i dist/roma_byob/benchmark_root_image.tar
docker run -it --privileged privacysandbox/roma-byob/microbenchmarks:v1-root
"""

cp_cmds = ["mkdir -p {dir}"] + [
    "cp $(execpath :benchmark_{{user}}{debug}_image.tar) {{dir}}/benchmark_{{user}}{debug}_image.tar".format(debug = debug_str)
    for debug_str in ("_debug", "")
] + [
    "cp $(execpath :traffic_generator_{name}_{{user}}_image.tar) {{dir}}/traffic_generator_{name}_{{user}}_image.tar".format(name = name)
    for name, _ in traffic_generator_args
]

genrule(
    name = "copy_to_dist",
    srcs = [":benchmark_{}{}_image.tar".format(
               u.flavor,
               d,
           ) for u in DISTROLESS_USERS for d in ("", "_debug")] +
           [":traffic_generator_{}_{}_image.tar".format(
               name,
               u.flavor,
           ) for name, _ in traffic_generator_args for u in DISTROLESS_USERS],
    outs = ["copy_to_dist.bin"],
    cmd_bash = "cat <<EOF >'$@'\n" + "\n".join(["\n".join(cp_cmds).format(
        dir = "dist/roma_byob",
        user = u.flavor,
    ) for u in DISTROLESS_USERS]) + """
builders/tools/normalize-dist
EOF""",
    executable = True,
    local = True,
    message = "copying aws artifacts to dist directory",
)
