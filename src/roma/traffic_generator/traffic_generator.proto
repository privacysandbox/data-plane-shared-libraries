// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Custom options definitions for Service, RPC and request/response fields.
// These services are used specifically to define a Roma Application API
// https://protobuf.dev/programming-guides/proto2/#customoptions

syntax = "proto3";

package privacysandbox.apis.roma.traffic_generator.v1;

import "google/protobuf/duration.proto";

message Params {
 int64 burst_size = 1;
 int32 queries_per_second = 2;
 int32 query_count = 3;
 bool sandbox_enabled = 4;
 int32 num_workers = 5;
 float late_burst_threshold = 7;
 string function_name = 8;
 string input_args = 9;
 bool ipc_namespace_enabled = 10;
 int64 connection_timeout_ms = 11;
}

message DurationStatistics {
  int64 count = 1;
  google.protobuf.Duration min = 2;
  google.protobuf.Duration p50 = 3;
  google.protobuf.Duration p90 = 4;
  google.protobuf.Duration p95 = 5;
  google.protobuf.Duration p99 = 6;
  google.protobuf.Duration max = 7;
  google.protobuf.Duration mad_variance = 8;
}

message BurstGeneratorStatistics {
  google.protobuf.Duration total_elapsed_time = 1;
  int64 total_invocation_count = 2;
  int64 late_count = 3;
  float late_burst_pct = 4;
  int64 failure_count = 5;
  float failure_pct = 6;
}

message Rlimit {
int32 soft = 1;
int32 hard = 2;
}

message SystemInfo {
  int32 hardware_thread_count = 1;
  int32 memory = 2;
  string linux_kernel = 3;
  Rlimit rlimit_sigpending = 4;
}

message Report {
  string run_id = 1;
  Params params = 2;
  BurstGeneratorStatistics statistics = 3;
  DurationStatistics burst_creation_latencies = 4;
  DurationStatistics burst_processing_latencies = 5;
  DurationStatistics invocation_latencies = 6;
  DurationStatistics output_latencies = 7;
  SystemInfo info = 8;
  // Time requests spend awaiting execution.
  DurationStatistics wait_latencies = 9;
}
