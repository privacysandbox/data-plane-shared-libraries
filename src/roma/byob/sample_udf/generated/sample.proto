// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//
// Generated from: src/roma/byob/sample_udf/sample.proto
//
// See /docs/Guide to the SDK.md for information on using this spec.
//
//
// SampleServer UDF Spec
// A sample server showcasing declarative APIs for BYOB
//

syntax = "proto3";

package privacy_sandbox.roma_byob.example;




//
// UDF rpc: Sample
//   The Sample method MethodAnnotation. Add some information about this rpc
//   method.
//   request: SampleRequest
//   response: SampleResponse

// SampleRequest specifies a single function to execute.
message SampleRequest {
  // The function to be executed
  FunctionType function = 1;
}

// SampleResponse returns the function's output.
message SampleResponse {
  // The payload generated by the function.
  string greeting = 1;
  // A list of prime numbers.
  repeated int32 prime_number = 2;
}

//
// UDF rpc: ReadPayload
//   MethodAnnotation. Add some information about this rpc method.
//   request: ReadPayloadRequest
//   response: ReadPayloadResponse


message ReadPayloadRequest {
  // The payloads sent into the UDF.
  repeated bytes payloads = 1;
}


message ReadPayloadResponse {
  // The size of the payloads sent to the UDF.
  uint64 payload_size = 1;
}

//
// UDF rpc: GeneratePayload
//   MethodAnnotation. Add some information about this rpc method.
//   request: GeneratePayloadRequest
//   response: GeneratePayloadResponse


message GeneratePayloadRequest {
  // The size of the payload elements for the UDF to generate.
  uint64 element_size = 1;
  // The number of the payload elements for the UDF to generate.
  uint64 element_count = 2;
}


message GeneratePayloadResponse {
  // The payloads generated by the UDF.
  repeated bytes payloads = 1;
}

//
// UDF rpc: RunPrimeSieve
//   MethodAnnotation
//   request: RunPrimeSieveRequest
//   response: RunPrimeSieveResponse


message RunPrimeSieveRequest {
  // The count of prime numbers to generate.
  int32 prime_count = 1;
}


message RunPrimeSieveResponse {
  // The Nth (and largest) of the prime numbers generated.
  int32 largest_prime = 1;
}

//
// UDF rpc: SortList
//   MethodAnnotation
//   request: SortListRequest
//   response: SortListResponse


message SortListRequest {
}


message SortListResponse {
}

//
// UDF rpc: Log
//   MethodAnnotation
//   request: LogRequest
//   response: LogResponse


message LogRequest {
  // Number of logs to write.
  int32 log_count = 1;
}


message LogResponse {
}


// Functions that can be executed by the Sample UDF.
enum FunctionType {
  FUNCTION_UNSPECIFIED = 0;
  // The hello world function.
  FUNCTION_HELLO_WORLD = 1;
  // The sieve-based prime generator function.
  FUNCTION_PRIME_SIEVE = 2;
  // Writes message to the message queue.
  FUNCTION_WRITE_SYS_V_MESSAGE_QUEUE = 5;
  // Reads message from the message queue.
  FUNCTION_READ_SYS_V_MESSAGE_QUEUE = 6;
  // Whether syscall filtering is enabled at reloader level only.
  FUNCTION_RELOADER_LEVEL_SYSCALL_FILTERING = 7;
  // Whether syscall filtering is enabled at both worker and reloader level.
  FUNCTION_WORKER_AND_RELOADER_LEVEL_SYSCALL_FILTERING = 8;
}
