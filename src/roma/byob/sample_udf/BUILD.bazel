# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@com_google_googleapis_imports//:imports.bzl", "cc_proto_library")
load("@container_structure_test//:defs.bzl", "container_structure_test")
load("@io_bazel_rules_go//go:def.bzl", "go_binary")
load("@io_bazel_rules_go//proto:def.bzl", "go_proto_library")
load("@rules_buf//buf:defs.bzl", "buf_lint_test")
load("@rules_cc//cc:defs.bzl", "cc_binary", "cc_library")
load("@rules_graalvm//graalvm:defs.bzl", "native_image")
load("@rules_java//java:defs.bzl", "java_library", "java_proto_library")
load("@rules_pkg//pkg:mappings.bzl", "pkg_attributes", "pkg_files")
load("@rules_pkg//pkg:tar.bzl", "pkg_tar")
load("@rules_proto//proto:defs.bzl", "proto_library")
load("//builders/bazel:container_deps.bzl", "DISTROLESS_USERS")
load(
    "//src/roma/tools/api_plugin:roma_api.bzl",
    "declare_roma_api",
    "roma_byob_sdk",
    "roma_host_api_cc_library",
    "roma_integrator_docs",
)

proto_library(
    name = "sample_proto",
    srcs = ["sample.proto"],
    visibility = ["//src/roma/byob:__subpackages__"],
    deps = ["//apis/privacysandbox/apis/roma/app_api/v1:options_proto"],
)

cc_proto_library(
    name = "sample_cc_proto",
    visibility = ["//src/roma/byob:__subpackages__"],
    deps = [
        ":sample_proto",
    ],
)

java_proto_library(
    name = "sample_java_proto",
    visibility = ["//src/roma/byob:__subpackages__"],
    deps = [":sample_byob_sdk_proto"],
)

buf_lint_test(
    name = "sample_proto_lint",
    size = "small",
    config = "//src:buf.yaml",
    targets = [":sample_proto"],
)

proto_library(
    name = "sample_callback_proto",
    srcs = ["sample_callback.proto"],
    visibility = ["//src/roma/byob:__subpackages__"],
    deps = ["//apis/privacysandbox/apis/roma/app_api/v1:options_proto"],
)

cc_proto_library(
    name = "sample_callback_cc_proto",
    visibility = ["//src/roma/byob:__subpackages__"],
    deps = [":sample_callback_proto"],
)

buf_lint_test(
    name = "sample_callback_proto_lint",
    size = "small",
    config = "//src:buf.yaml",
    targets = [":sample_callback_proto"],
)

sample_service_host_api = declare_roma_api(
    cc_protos = [":sample_callback_cc_proto"],
    proto_basename = "sample_callback",
    protos = [":sample_callback_proto"],
)

roma_host_api_cc_library(
    name = "sample_service_roma_host_api",
    roma_host_api = sample_service_host_api,
    tags = [
        "noasan",
        "notsan",
    ],
    visibility = ["//src/roma/byob:__subpackages__"],
    deps = ["//src/roma/byob/sample_udf:sample_service_native_functions"],
)

sample_api = declare_roma_api(
    cc_protos = [":sample_cc_proto"],
    proto_basename = "sample",
    protos = [":sample_proto"],
)

roma_byob_sdk(
    name = "sample_byob_sdk",
    generated_proto_path = "generated/sample.proto",
    roma_app_api = sample_api,
    visibility = ["//visibility:public"],
)

container_structure_test(
    name = "sample_byob_shell_cli_test",
    size = "medium",
    configs = [":shell_cli_test.yaml"],
    image = ":sample_byob_sdk_roma_cc_lib_shell_image",
    tags = [
        "noasan",
        "nomsan",
        "notsan",
        "noubsan",
    ],
)

roma_integrator_docs(
    name = "sample_byob_integrator_docs",
    app_api_cc_library = ":sample_byob_sdk_roma_cc_lib",
)

go_proto_library(
    name = "sample_go_proto",
    importpath = "github.com/privacysandbox/data-plane-shared/apis/roma/binary/example",
    proto = ":sample_byob_sdk_proto",
    deps = ["//src/roma/tools/api_plugin:options_go"],
)

go_binary(
    name = "sample_go_udf",
    srcs = ["sample_udf.go"],
    visibility = ["//visibility:public"],
    deps = [
        ":sample_go_proto",
        "@com_github_golang_protobuf//proto:go_default_library",
        "@org_golang_google_protobuf//encoding/protodelim",
    ],
)

cc_binary(
    name = "new_udf",
    srcs = ["new_udf.cc"],
    visibility = ["//visibility:public"],
    deps = [
        ":sample_byob_sdk_cc_proto",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_binary(
    name = "syscall_filter_udf",
    srcs = ["syscall_filter_udf.cc"],
    visibility = ["//visibility:public"],
    deps = [
        ":sample_byob_sdk_cc_proto",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_binary(
    name = "cap_udf",
    srcs = ["cap_udf.cc"],
    visibility = ["//visibility:public"],
    deps = [
        ":sample_byob_sdk_cc_proto",
        "@com_google_absl//absl/cleanup",
        "@com_google_absl//absl/strings",
        "@com_google_protobuf//:protobuf",
        "@libcap",
    ],
)

cc_binary(
    name = "socket_finder_udf",
    srcs = ["socket_finder_udf.cc"],
    visibility = ["//visibility:public"],
    deps = [
        ":sample_byob_sdk_cc_proto",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_binary(
    name = "pause_udf",
    srcs = ["pause_udf.cc"],
    visibility = ["//visibility:public"],
    deps = [
        ":sample_byob_sdk_cc_proto",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_binary(
    name = "filesystem_add_udf",
    srcs = ["filesystem_add_udf.cc"],
    visibility = ["//visibility:public"],
    deps = [
        ":sample_byob_sdk_cc_proto",
        "@com_google_absl//absl/status",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_binary(
    name = "filesystem_edit_udf",
    srcs = ["filesystem_edit_udf.cc"],
    visibility = ["//visibility:public"],
    deps = [
        ":sample_byob_sdk_cc_proto",
        "@com_google_absl//absl/status",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_binary(
    name = "filesystem_delete_udf",
    srcs = ["filesystem_delete_udf.cc"],
    visibility = ["//visibility:public"],
    deps = [
        ":sample_byob_sdk_cc_proto",
        "@com_google_absl//absl/status",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_binary(
    name = "abort_early_udf",
    srcs = ["abort_early_udf.cc"],
    visibility = ["//visibility:public"],
)

cc_binary(
    name = "abort_late_udf",
    srcs = ["abort_late_udf.cc"],
    visibility = ["//visibility:public"],
    deps = [
        ":sample_byob_sdk_cc_proto",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_binary(
    name = "nonzero_return_udf",
    srcs = ["nonzero_return_udf.cc"],
    visibility = ["//visibility:public"],
    deps = [
        ":sample_byob_sdk_cc_proto",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_binary(
    name = "sample_udf",
    srcs = ["sample_udf.cc"],
    visibility = ["//visibility:public"],
    deps = [
        ":sample_byob_sdk_cc_proto",
        "@com_google_absl//absl/log",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_binary(
    name = "payload_read_udf",
    srcs = ["payload_read.cc"],
    visibility = ["//visibility:public"],
    deps = [
        ":sample_byob_sdk_cc_proto",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_binary(
    name = "payload_write_udf",
    srcs = ["payload_write.cc"],
    visibility = ["//visibility:public"],
    deps = [
        ":sample_byob_sdk_cc_proto",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_binary(
    name = "prime_sieve_udf",
    srcs = ["prime_sieve_udf.cc"],
    deps = [
        ":sample_byob_sdk_cc_proto",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_binary(
    name = "sort_list_10k_udf",
    srcs = ["sort_list_10k_udf.cc"],
    visibility = ["//src/roma/byob:__subpackages__"],
    deps = [
        ":sample_byob_sdk_cc_proto",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_binary(
    name = "sort_list_100k_udf",
    srcs = ["sort_list_100k_udf.cc"],
    visibility = ["//src/roma/byob:__subpackages__"],
    deps = [
        ":sample_byob_sdk_cc_proto",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_binary(
    name = "sort_list_1m_udf",
    srcs = ["sort_list_1m_udf.cc"],
    visibility = ["//src/roma/byob:__subpackages__"],
    deps = [
        ":sample_byob_sdk_cc_proto",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_library(
    name = "sample_service_native_functions",
    srcs = ["sample_service_native_functions.h"],
    deps = [
        ":sample_callback_cc_proto",
        "@com_google_absl//absl/status",
    ],
)

cc_binary(
    name = "log_udf",
    srcs = ["log_udf.cc"],
    visibility = ["//visibility:public"],
    deps = [
        ":sample_byob_sdk_cc_proto",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_binary(
    name = "log_benchmark_udf",
    srcs = ["log_benchmark_udf.cc"],
    visibility = ["//visibility:public"],
    deps = [
        ":sample_byob_sdk_cc_proto",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_binary(
    name = "message_queue_udf",
    srcs = ["message_queue_udf.cc"],
    visibility = ["//visibility:public"],
    deps = [
        ":sample_byob_sdk_cc_proto",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_protobuf//:protobuf",
    ],
)

java_library(
    name = "sample_java_udf",
    srcs = ["SampleUdf.java"],
    resource_strip_prefix = "src/roma/byob/sample_udf",
    visibility = ["//visibility:public"],
    deps = [
        ":sample_java_proto",
        "@com_google_protobuf//java/core",
    ],
)

native_image(
    name = "sample_java_native_udf",
    executable_name = "sample_java_native_udf",
    extra_args = [
        "--add-opens=java.base/java.io=ALL-UNNAMED",
        "--static",
    ],
    main_class = "SampleUdf",
    native_image_tool = "@graalvm//:native-image",
    reflection_configuration = "sample_udf_reflect_config.json",
    static_zlib = "@zlib",
    tags = [
        "noasan",
        "notsan",
        "noubsan",
    ],
    deps = [
        ":sample_java_udf",
    ],
)

filegroup(
    name = "udf_binaries",
    srcs = [
        ":abort_early_udf",
        ":abort_late_udf",
        ":cap_udf",
        ":filesystem_add_udf",
        ":filesystem_delete_udf",
        ":filesystem_edit_udf",
        ":log_benchmark_udf",
        ":log_udf",
        ":message_queue_udf",
        ":new_udf",
        ":pause_udf",
        ":payload_read_udf",
        ":payload_write_udf",
        ":prime_sieve_udf",
        ":sample_go_udf",
        ":sample_java_native_udf",
        ":sample_udf",
        ":socket_finder_udf",
        ":sort_list_100k_udf",
        ":sort_list_10k_udf",
        ":sort_list_1m_udf",
        ":syscall_filter_udf",
        "//src/roma/byob/example:example_cc_udf",
        "//src/roma/byob/example:example_go_udf",
    ],
    visibility = ["//visibility:public"],
)

pkg_files(
    name = "udf_execs",
    srcs = [":udf_binaries"],
    attributes = pkg_attributes(mode = "0500"),
    prefix = "/udf",
)

[
    pkg_tar(
        name = "udf_{}_tar".format(user.flavor),
        srcs = [":udf_execs"],
        owner = "{}.{}".format(
            user.uid,
            user.gid,
        ),
        visibility = ["//visibility:public"],
    )
    for user in DISTROLESS_USERS
]

genrule(
    name = "copy_to_dist",
    srcs = [
        ":udf_binaries",
    ],
    outs = ["copy_to_dist.bin"],
    cmd_bash = """cat <<EOF >'$@'
mkdir -p {dir}
cp $(execpaths :udf_binaries) {dir}/
builders/tools/normalize-dist
EOF""".format(dir = "dist/roma_byob/udf/sample"),
    executable = True,
    local = True,
    message = "copying aws artifacts to dist directory",
)
