[//]: <> (This file is @generated by src/roma/tools/api_plugin/tmpl/byob/app/md_cpp_client_sdk.tmpl. Do not edit.)
[//]: <> (Version: {{getVersion}})
[//]: <> (Code Generator: {{getRomaGenerator}})

# Roma Application C++ Client SDK

## Table of Contents
{{- range $file := .Files}}
{{- $file_name := .Name -}}

- [{{$file.Name}}](#{{$file_name | anchor}})
{{- if $file.Services}}
{{range $svc := $file.Services}}
- [{{$svc.Name}}](#{{$svc.FullName | anchor}})
{{- end}}
{{- end}}
{{- if .Messages}}
{{- range $msg := .Messages}}
- [{{$msg.LongName}}](#{{$msg.FullName | anchor}})
{{- end}}
{{- end}}
{{- if .Enums}}
{{range $enum := .Enums}}
- [{{$enum.LongName}}](#{{$enum.FullName | anchor}})
{{- end}}
{{- end}}
{{- end}}

{{- range $file := .Files}}

#Services
{{- range $svc := $file.Services}}
{{- $svcopts := index $svc.Options "privacysandbox.apis.roma.app_api.v1.roma_svc_annotation"}}
<a name="{{$svc.FullName | anchor}}"></a>
## Service: {{$svcopts.RomaAppName}} (`{{$svc.FullName}}`)
`{{$svcopts.Description}}`

{{- $svcName := printf "Byob%s" $svc.Name -}}

**Namespace:** {{$svcopts.CppNamespace}}

```c++
 class {{$svcName}} final {
 public:
  using AppService = privacy_sandbox::server_common::byob::RomaService<TMetadata>;
  using Config = privacy_sandbox::server_common::byob::Config<TMetadata>;
  using Mode = privacy_sandbox::server_common::byob::Mode;

  static absl::StatusOr<{{$svcName}}<TMetadata>> Create(Config config,
                                                        Mode mode);
  /**
   * @brief Registers a new binary synchronously from the provided `code_path`.
   *
   * @paragraph If load is successful, registered service can be called on the
   * code using the `code_token` returned by this function.
   *
   * @param code_path path to the binary to be loaded into the sandbox.
   * @param num_workers number of workers in the worker pool.
   * @return absl::StatusOr<std::string> returns the `code_token`.
   */
  absl::StatusOr<std::string> Register(std::string_view code_path,
                                       int num_workers);

  /**
  * @brief Creates workers for binary with logging with logging enabled.
  *
  * @paragraph If load is successful, registered service can be called on the
  * code using the `code_token` returned by this function.
  *
  * @param code_path path to the binary to be loaded into the sandbox.
  * @param num_workers number of prewarmed workers to be created.
  * Currently, zero workers are not supported.
  * @return absl::StatusOr<std::string> returns the `code_token`.
  */
  absl::StatusOr<std::string> RegisterForLogging(
      std::filesystem::path code_path, int num_workers);

  /**
   * @brief Registers a new binary synchronously from the provided `code_path`.
   *
   * @paragraph If load is successful, registered service can be called on the
   * code using the `code_token` returned by this function.
   *
   * @param no_log_code_token code token corresponding to the already loaded binary.
   * @param num_workers number of prewarmed workers to be created.
   * Currently, zero workers are not supported.
   * @return absl::StatusOr<std::string> returns the `code_token`.
   */
  absl::StatusOr<std::string> RegisterForLogging(
      std::string no_log_code_token,
      int num_workers);

  void Delete(std::string_view code_token);

  void Cancel(google::scp::roma::ExecutionToken token);

{{- range $rpc := .MethodsWithOption "privacysandbox.apis.roma.app_api.v1.roma_rpc_annotation"}}
  {{- $reqType := $rpc.RequestFullType | replace "." "::" | printf "::%s" }}
  {{- $respType := $rpc.ResponseFullType | replace "." "::" | printf "::%s" }}
  /*
   * @brief Executes {{$rpc.Name}} referred to by the provided `code_token`
   * asynchronously.
   *
   * {{$rpc.Name}}
   * {{- $rpc.Description}}
   *
   * @param notification notifies that `response` is available.
   * @param request {{$reqType}} for the binary.
   * @param response populated with the status once execution is completed. If
   * the status is ok, then `{{$respType}}` returned by this function contains
   * the response else the error.
   * @param metadata for execution request. It is a templated type.
   * @param code_token identifier provided by load of the binary to be executed.
   * @return absl::Status
   */
  absl::Status {{$rpc.Name}}(
      absl::Notification& notification, const {{$reqType}}& request,
      absl::StatusOr<{{$respType}}>& response,
      TMetadata metadata = TMetadata(), std::string_view code_token = "");

  absl::Status {{$rpc.Name}}(
      absl::AnyInvocable<void(absl::StatusOr<{{$respType}}>)> callback,
      const {{$reqType}}& request,
      TMetadata metadata = TMetadata(),
      std::string_view code_token);

  absl::StatusOr<google::scp::roma::ExecutionToken> {{$rpc.Name}}(
      absl::AnyInvocable<void(absl::StatusOr<{{$respType}}>,
      absl::StatusOr<std::string_view> logs)> callback_with_logs_param,
      const {{$reqType}}& request,
      TMetadata metadata = TMetadata(),
      std::string_view code_token = "")
{{end}}

};
```

{{range $rpc := $svc.MethodsWithOption "privacysandbox.apis.roma.app_api.v1.roma_rpc_annotation"}}
{{- $reqFullType := $rpc.RequestFullType | printf "proto.%s" }}
{{- $reqType := $rpc.RequestType }}
{{- $respFullType := $rpc.ResponseFullType | printf "proto.%s" }}
{{- $respType := $rpc.ResponseType }}

### rpc: {{$svcopts.RomaAppName}}.{{$rpc.Name}}
{{- if $rpc.Description}}
{{$rpc.Description}}
{{- end}}

Request: `{{$reqFullType}}`

Response: `{{$respFullType}}`

{{end}}{{/*methods*/}}

| Method Name | Request Type | Response Type | Description |
| ----------- | ------------ | ------------- | ------------|
{{- range $rpc := $svc.Methods}}
| {{$rpc.Name}} | [{{$rpc.RequestLongType}}](#{{$rpc.RequestFullType | anchor}}){{if $rpc.RequestStreaming}} stream{{end}} | [{{$rpc.ResponseLongType}}](#{{$rpc.ResponseFullType | anchor}}){{if $rpc.ResponseStreaming}} stream{{end}} | {{nobr $rpc.Description}} |
{{- end}}

{{- end}}{{/*services*/}}

# Protobuf Messages
{{- range $msg := $file.Messages}}
<a name="{{$msg.FullName | anchor}}"></a>

## {{$msg.LongName}}
{{$msg.Description}}

{{- if $msg.HasFields}}
| Field | Type | Label | Description |
| ----- | ---- | ----- | ----------- |
{{- range $fld := $msg.Fields}}
| {{$fld.Name}} | [{{$fld.LongType}}](#{{$fld.FullType | anchor}}) | {{$fld.Label}} | {{if (index $fld.Options "deprecated"|default false)}}**Deprecated$fld.** {{end}}{{nobr $fld.Description}}{{if $fld.DefaultValue}} Default: {{$fld.DefaultValue}}{{end}} |
{{- end}}
{{- end}}{{/*fields*/}}
{{- end}}{{/*messages*/}}

{{- range $enum := $file.Enums}}
<a name="{{$enum.FullName | anchor}}"></a>
## {{$enum.LongName}}
{{$enum.Description}}

| Name | Number | Description |
| ---- | ------ | ----------- |
{{- range $val := .Values}}
| {{$val.Name}} | {{$val.Number}} | {{nobr $val.Description}} |
{{- end}}

{{end}}{{/*enums*/}}
{{end}}{{/*files*/}}
