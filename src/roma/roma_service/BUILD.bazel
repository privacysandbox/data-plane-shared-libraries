# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@rules_buf//buf:defs.bzl", "buf_lint_test")
load("@rules_cc//cc:defs.bzl", "cc_library", "cc_proto_library", "cc_test")
load("@rules_proto//proto:defs.bzl", "proto_library")

cc_library(
    name = "roma_service",
    hdrs = ["roma_service.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//src/core/os/linux:system_resource_info_provider_linux",
        "//src/roma/logging",
        "//src/roma/metadata_storage",
        "//src/roma/native_function_grpc_server",
        "//src/roma/native_function_grpc_server:request_handlers",
        "//src/roma/sandbox/constants",
        "//src/roma/sandbox/dispatcher",
        "//src/roma/sandbox/native_function_binding:native_function_handler",
        "//src/roma/sandbox/native_function_binding:native_function_table",
        "//src/util:execution_token",
        "//src/util:scoped_execution_token",
        "//src/util/status_macro:status_macros",
        "@com_google_absl//absl/functional:any_invocable",
    ],
)

cc_test(
    name = "buffer_size_test",
    size = "small",
    srcs = ["buffer_size_test.cc"],
    tags = [
        "noasan",  # TODO: b/354929154 - Create SAPI sandbox only in non_prod mode
        "notsan",  # TODO: b/354929154 - Create SAPI sandbox only in non_prod mode
    ],
    deps = [
        ":roma_service",
        "//src/roma/config",
        "//src/roma/interface",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/synchronization",
        "@com_google_absl//absl/time",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "buffer_size_sapi_test",
    size = "small",
    srcs = ["buffer_size_sapi_test.cc"],
    tags = [
        "noasan",  # TODO(b/293876281) - Fix ASAN errors in this test.
        "notsan",  # TODO(b/307540489) - Fix TSAN errors in this test.
    ],
    target_compatible_with = select({
        "//:non_sapi_build": ["@platforms//:incompatible"],
        "//conditions:default": [],
    }),
    deps = [
        ":roma_service",
        "//src/roma/config",
        "//src/roma/interface",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/synchronization",
        "@com_google_absl//absl/time",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "function_binding_test",
    size = "small",
    srcs = ["function_binding_test.cc"],
    tags = [
        "noasan",  # TODO(b/293876281) - Fix ASAN errors in this test.
        "notsan",  # TODO(b/307540489) - Fix TSAN errors in this test. Fails on aarch64.
        "noubsan",  # TODO(b/307540489) - Fix UBSAN errors in this test.
    ],
    deps = [
        ":roma_service",
        "//src/roma/config",
        "//src/roma/config:function_binding_object_v2",
        "//src/roma/interface",
        "@com_google_absl//absl/synchronization",
        "@com_google_absl//absl/time",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "metadata_sapi_test",
    size = "small",
    srcs = ["metadata_sapi_test.cc"],
    tags = [
        "noasan",  # TODO(b/293876281) - Fix ASAN errors in this test.
        "notsan",  # TODO(b/307540489) - Fix TSAN errors in this test.
    ],
    target_compatible_with = select({
        "//:non_sapi_build": ["@platforms//:incompatible"],
        "//conditions:default": [],
    }),
    deps = [
        ":roma_service",
        "//src/roma/config",
        "//src/roma/config:function_binding_object_v2",
        "//src/roma/interface",
        "@com_google_absl//absl/base:log_severity",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/log:scoped_mock_log",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/synchronization",
        "@com_google_absl//absl/time",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "metadata_test",
    size = "small",
    srcs = ["metadata_test.cc"],
    tags = [
        "noasan",  # TODO: b/354929154 - Create SAPI sandbox only in non_prod mode
        "notsan",  # TODO: b/354929154 - Create SAPI sandbox only in non_prod mode
    ],
    deps = [
        ":roma_service",
        "//src/roma/config",
        "//src/roma/config:function_binding_object_v2",
        "//src/roma/interface",
        "@com_google_absl//absl/base:log_severity",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/log:scoped_mock_log",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/synchronization",
        "@com_google_absl//absl/time",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "sandboxed_service_sapi_test",
    size = "small",
    srcs = ["sandboxed_service_sapi_test.cc"],
    tags = [
        "noasan",  # TODO(b/293876281) - Fix ASAN errors in this test.
        "notsan",  # TODO(b/307540489) - Fix TSAN errors in this test.
        "noubsan",  # TODO(b/307540489) - Fix UBSAN errors in this test.
    ],
    target_compatible_with = select({
        "//:non_sapi_build": ["@platforms//:incompatible"],
        "//conditions:default": [],
    }),
    deps = [
        ":roma_service",
        "//src/roma/config",
        "//src/roma/config:function_binding_object_v2",
        "//src/roma/interface",
        "//src/roma/native_function_grpc_server:test_request_handlers",
        "//src/roma/native_function_grpc_server/proto:multi_service_roma_host_api",
        "//src/roma/native_function_grpc_server/proto:test_service_roma_app_api",
        "//src/roma/native_function_grpc_server/proto:test_service_roma_host_api",
        "//src/util:duration",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/synchronization",
        "@com_google_absl//absl/time",
        "@com_google_googletest//:gtest_main",
        "@nlohmann_json//:lib",
    ],
)

cc_test(
    name = "sandboxed_service_test",
    size = "small",
    srcs = ["sandboxed_service_test.cc"],
    tags = [
        "noasan",  # TODO: b/354929154 - Create SAPI sandbox only in non_prod mode
        "notsan",  # TODO: b/354929154 - Create SAPI sandbox only in non_prod mode
        "noubsan",  # TODO: b/354929154 - Create SAPI sandbox only in non_prod mode
    ],
    deps = [
        ":roma_service",
        "//src/roma/config",
        "//src/roma/config:function_binding_object_v2",
        "//src/roma/interface",
        "//src/roma/interface:metrics",
        "//src/roma/native_function_grpc_server:test_request_handlers",
        "//src/roma/native_function_grpc_server/proto:multi_service_roma_host_api",
        "//src/roma/native_function_grpc_server/proto:test_service_roma_app_api",
        "//src/roma/native_function_grpc_server/proto:test_service_roma_host_api",
        "//src/util:duration",
        "@com_google_absl//absl/log:scoped_mock_log",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/synchronization",
        "@com_google_absl//absl/time",
        "@com_google_googletest//:gtest_main",
        "@nlohmann_json//:lib",
    ],
)

cc_test(
    name = "wasm_sapi_test",
    size = "small",
    srcs = ["wasm_sapi_test.cc"],
    data = [
        "//src/roma/testing/cpp_wasm_allocate_memory",
        "//src/roma/testing/cpp_wasm_erroneous_code_example",
        "//src/roma/testing/cpp_wasm_hello_world_example",
        "//src/roma/testing/cpp_wasm_string_in_string_out_example",
    ],
    tags = [
        "noasan",  # TODO(b/293876281) - Fix ASAN errors in this test.
        "notsan",  # TODO(b/307540489) - Fix TSAN errors in this test.
        "noubsan",  # TODO(b/308167161) - Fix UBSAN errors in this test.
    ],
    target_compatible_with = select({
        "//:non_sapi_build": ["@platforms//:incompatible"],
        "//conditions:default": [],
    }),
    deps = [
        ":roma_service",
        "//src/roma/config",
        "//src/roma/interface",
        "//src/roma/wasm:wasm_testing",
        "@com_google_absl//absl/base:log_severity",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/log:scoped_mock_log",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/synchronization",
        "@com_google_absl//absl/time",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "wasm_test",
    size = "small",
    srcs = ["wasm_test.cc"],
    data = [
        "//src/roma/testing/cpp_wasm_allocate_memory",
        "//src/roma/testing/cpp_wasm_erroneous_code_example",
        "//src/roma/testing/cpp_wasm_hello_world_with_logging_example",
        "//src/roma/testing/cpp_wasm_string_in_string_out_example",
    ],
    tags = [
        "noasan",  # TODO: b/354929154 - Create SAPI sandbox only in non_prod mode
        "notsan",  # TODO: b/354929154 - Create SAPI sandbox only in non_prod mode
        "noubsan",  # TODO: b/354929154 - Create SAPI sandbox only in non_prod mode
    ],
    deps = [
        ":roma_service",
        "//src/roma/config",
        "//src/roma/interface",
        "//src/roma/wasm:wasm_testing",
        "@com_google_absl//absl/base:log_severity",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/log:scoped_mock_log",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/synchronization",
        "@com_google_absl//absl/time",
        "@com_google_googletest//:gtest_main",
    ],
)

proto_library(
    name = "helloworld_proto",
    srcs = ["helloworld.proto"],
)

buf_lint_test(
    name = "helloworld_proto_lint",
    size = "small",
    config = "//src:buf.yaml",
    targets = [":helloworld_proto"],
)

cc_proto_library(
    name = "helloworld_cc_proto",
    visibility = ["//visibility:public"],
    deps = [":helloworld_proto"],
)

cc_library(
    name = "romav8_app_service",
    hdrs = ["romav8_app_service.h"],
    visibility = ["//visibility:public"],
    deps = [
        ":roma_service",
        ":romav8_proto_utils",
        "//src/roma/config",
        "//src/roma/config:function_binding_object_v2",
        "//src/roma/interface",
        "//src/util/status_macro:status_macros",
        "@com_google_absl//absl/functional:any_invocable",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/synchronization",
    ],
)

cc_test(
    name = "romav8_app_service_test",
    size = "small",
    srcs = ["romav8_app_service_test.cc"],
    tags = [
        "noasan",
        "notsan",
    ],
    deps = [
        ":helloworld_cc_proto",
        ":romav8_app_service",
        "//src/roma/config",
        "//src/roma/config:function_binding_object_v2",
        "//src/roma/interface",
        "@com_google_absl//absl/functional:any_invocable",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/synchronization",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "romav8_proto_utils",
    srcs = ["romav8_proto_utils.h"],
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_test(
    name = "romav8_proto_utils_test",
    size = "small",
    srcs = ["romav8_proto_utils_test.cc"],
    deps = [
        ":helloworld_cc_proto",
        ":romav8_proto_utils",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "string_size_test",
    size = "large",
    timeout = "short",
    srcs = ["string_size_test.cc"],
    tags = [
        "noasan",  # TODO(b/293876281) - Fix ASAN errors in this test.
        "notsan",  # TODO(b/307540489) - Fix TSAN errors in this test.
        "noubsan",  # TODO(b/308167161) - Fix UBSAN errors in this test.
    ],
    deps = [
        ":roma_service",
        "//src/roma/config",
        "//src/roma/config:function_binding_object_v2",
        "//src/roma/interface",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/synchronization",
        "@com_google_absl//absl/time",
        "@com_google_googletest//:gtest_main",
    ],
)
